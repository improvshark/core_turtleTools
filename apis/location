
-- the default number of trys before giving up
tries = 3
statePath = core.coreDir() .. '/modules/turtleTools/apis/.locationState'
wayPointPath = core.coreDir() .. '/modules/turtleTools/apis/.wayPoints'

----
local location = {
	coord = vector.new(0,0,0),
	direction = 0
}

-- table of functions on how to deal with stuff
local handle ={}

-- lock so nobody else can access movement while somebody is in a movement

function lock()
end

function unlock()
end

function saveLocation(vector)
	configman.save(statePath, location)
end

function loadLocation()
	location = configman.load(statePath)
end

function saveWaypoints(points)
	configman.load(wayPointPath, points)
end

function loadWaypoints()
	configman.load(wayPointPath)
end

function addWaypoint(wayPointTable, nameArg, coordArg, directionArg )
	if wayPointTable == nil or n == nil or c == nil then return false end
	point ={}
	point.name = nameArg 
	point.coord = coordArg
	if directionArg ~= nil then point.direction = directionArg end
	table.insert (wayPointTable, point)
	return configman.save(wayPointPath)
end

function getGpsLocation()
end

function gpsUpdate()
end

function handleNoFuel(fun)
--	fuel slot/slots/all/pause/
-- default and pause and request fuel
end

function handleAnimalBlock()
	-- default is to atack until atack fails
end

function handleTurtleBlock(fun)
-- default wait a little while it still doesnt move break it
end

function handleBlock(fun)
-- default retry and then return false and reason
end

function handleLock(fun)
-- default return false and reason
end


local function blockHandler(agressive, hijacked)
--[[
if we cant move forward try and guess why
return false and the reason, detailed Reason

1. fuel
2. blocked
	-turtle
	-animal/player
	-block(breakable)
		-gravel/sand
	-block(nonAgressive)
	-block(unbreakable)
]]--
end


local function validateMove(functionCall)
	fuel = turtle.getFuelLevel()
	functionCall()
	return (turtle.getFuelLevel() == fuel -1)
end

-- movements
function forward(amount, agressive, tries, hijacked)
end
function back(amount, agressive, tries, hijacked)
end
function up(amount, agressive, tries, hijacked)
end
function down(amount, agressive, tries, hijacked)
end
function turnLeft(amount, agressive, tries, hijacked)
end
function turnRight(amount, agressive, tries, hijacked)
end


