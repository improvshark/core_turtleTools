
-- Configs
triesDefault = 4  --have to have at least 1
statePath = core.coreDir() .. '/modules/turtleTools/.locationState'


gravelWaitTime = .25
turtleWaitTime = 5
baseFuelLevel = 10

---- end Configs
local location = {
	coord = vector.new(0,0,0),
	direction = 2
}

directions = {
	[0] = 'south',
	[1] = 'west',
	[2] = 'north',
	[3] = 'east',
}

orig_turtle = {
            forward   = turtle.forward,
            back      = turtle.back,
            up        = turtle.up,
            down      = turtle.down,
            turnRight = turtle.turnRight,
            turnLeft  = turtle.turnLeft
        }
-- some getters

function getPosition() -- returns a copy of location
	return {
		coord = vector.new(location.coord.x,location.coord.y,location.coord.z),
		direction = location.direction
	}
end

function getCoord() return vector.new(location.coord.x,location.coord.y,location.coord.z) end
function getX() return direction.coord.x end
function getY() return direction.coord.y end
function getZ() return direction.coord.z end
function getDirection() return direction.direction end
function getDirectionString()
	return directions[location.direction]
end


local function saveLocation()
	configman.save(statePath, location)
end

local function loadLocation()
	temp = configman.load(statePath)
	if temp == nil then
		saveLocation()
		temp = configman.load(statePath)
	end

	location.coord.x = tonumber(temp.coord.x)
	location.coord.y = tonumber(temp.coord.y)
	location.coord.z = tonumber(temp.coord.z)
	location.direction = tonumber(temp.direction)

	
end
loadLocation()


function setLocation(x,y,z,f)
	if tonumber(x) == nil or tonumber(y) == nil or tonumber(z) == nil or tonumber(f)== nil then return false end
	location.direction = f
	location.coord.x = x
	location.coord.y = y
	location.coord.z = z
	saveLocation()
end

function gpsUpdate(f)
	--todo get direction facing by moving and checking gps again
	x, y, z = gps.locate()
	if x ~= nil then
		location.x = x
		location.y = y 
		location.z = z
	end
	if tonumber(f) and f >= 0 and f <= 3 then location.direction = f end
	for k, v in pairs(directions) do
		if f == v then location.direction = tonumber(k) end
	end
	saveLocation()
end

function detectFull()
	fullCount = 0
	for i = 1, 16 do
		if turtle.getItemCount(i) > 0 then
			fullCount = fullCount +1
		end
	end
	return fullCount == 16
end

local function detectTurtle(side)
	if peripheral.getType(side) == 'turtle' then
		return true
	end
	return false
end

local function detectAnimal(side)
	if side == 'front' and turtle.attack() then
		return true
	elseif side == 'top' and turtle.attackUp() then
		return true
	elseif side == 'bottom' and turtle.attackDown() then
		return true
	end
	return false
end

local function detectBlock(side)
	if side == 'front' and turtle.detect() then
		return true
	elseif side == 'top' and turtle.detectUp() then
		return true
	elseif side == 'bottom' and turtle.detectDown() then
		return true
	end
	return false
end

-- table of functions on how to deal with stuff
handle ={}

handle.fuelPause =  function() 
  
  print ("no Fuel left!")
  print ("a. continue")
  print ("b. exit")

  do
    input = io.read()
    while input ~= 'y' do
      if input == 'n' then
        return false;
      else
        print ("bad input? try again")
      end
      input = io.read()
    end
    return true;
  end
end


handle.full = function()
	--default do nothing
	print('invintory full')
end

handle.fuel = function()
	-- go through all slots try to refuel if none pause and ask for some
	fueled = false
	currentSlot = turtle.getSelectedSlot()
	for i = 1, 16 do
		
		if turtle.getItemCount(i) > 0 then
			turtle.select(i)
			fueled = turtle.refuel(1)
		end
	end
	if handle.fuelPause() then
		handle.fuel()
	end
	turtle.select(currentSlot)
end

handle.turtle = function(side, agressive)
-- default wait a little while if still doesnt move break it
	print('found a turtle')
	if not agressive then return false end
	sleep(turtleWaitTime)
	if detectTurtle(side) then
		if side == 'front' then turtle.dig()
		elseif side == 'top' then turtle.digUp()
		elseif side == 'bottom' then turtle.digDown() end
	end
end

handle.animal = function(side)
	while detectAnimal(side) do end
	while detectAnimal(side) do end
end

handle.unbreakable = function(side)
	return false
end

handle.gravel = function(side)
	print('handle gravel')
	
	if side == 'front' then  
		while turtle.detect() do turtle.dig() end
	elseif side == 'top' then 
		while turtle.detectUp() do turtle.digUp() end
	elseif side == 'bottom' then 
		while turtle.detectDown() do turtle.digDown() end 
	end
		sleep(gravelWaitTime)
	
end

handle.block = function(side, agressive)

	if not agressive then 
		return false 
	end

	if side == 'front' and turtle.detect() then
		if not turtle.dig() then handle.unbreakable(); end
	elseif side == 'top' and turtle.detectUp() then
		if not turtle.digUp() then handle.unbreakable(); end
	elseif side == 'bottom' and turtle.detectDown() then
		if not turtle.digDown() then handle.unbreakable(); end
	end
end

local function move(direction)
	fuel = turtle.getFuelLevel()
	if direction == 'forward' then orig_turtle.forward()
	elseif direction == 'up' then orig_turtle.up() 
	elseif direction == 'down' then orig_turtle.down() 
	elseif direction == 'back' then orig_turtle.back() end
	moved =  (turtle.getFuelLevel() == fuel -1)
	if moved == true then

		if direction == 'forward' then 
			if location.direction == 0 then
				location.coord.z = location.coord.z + 1
			elseif location.direction == 1 then
				location.coord.x = location.coord.x - 1
			elseif location.direction == 2 then
				location.coord.z = location.coord.z - 1
			elseif location.direction == 3 then
				location.coord.x = location.coord.x + 1
			end
		elseif direction == 'back' then
			if location.direction == 0 then
				location.coord.z = location.coord.z - 1
			elseif location.direction == 1 then
				location.coord.x = location.coord.x + 1
			elseif location.direction == 2 then
				location.coord.z = location.coord.z + 1
			elseif location.direction == 3 then
				location.coord.x = location.coord.x - 1
			end
		elseif direction == 'up' then 
			location.coord.y = location.coord.y + 1 
		elseif direction == 'down' then 
			location.coord.y = location.coord.y - 1 
		end

		saveLocation()
	end
	return moved
end

local function copy (t) -- shallow-copy a table
    if type(t) ~= "table" then return t end
    local meta = getmetatable(t)
    local target = {}
    for k, v in pairs(t) do target[k] = v end
    setmetatable(target, meta)
    return target
end

local handleDefaults = copy(handle)
local turtleBackup = copy(turtle)

function resetHandlers()
	handle = copy(handleDefaults)
end



function turnRight(amount)
	if amount == nil then amount = 1 end
	for i = 1, amount do
		if orig_turtle.turnRight() then
			if location.direction < 3 then 
				location.direction = location.direction + 1 
			elseif location.direction >= 3 then
				location.direction = 0
			end
			saveLocation() 
		end
	end
	return true
end

function turnLeft(amount)
	if amount == nil then amount = 1 end
	for i = 1, amount do
		if orig_turtle.turnLeft() then 
			if location.direction <= 0 then 
				location.direction = 3
			elseif location.direction > 0 then
				location.direction = location.direction - 1 
			end
			saveLocation() 
		end
	end
	return true
end

function forward(amount, agressive, tries, hijacked)
	if amount == nil then amount = 1 end
	if agressive == nil then agressive = false end
	if tries == nil then tries = triesDefault end
	if hijacked == nil then hijacked = false end

	if hijacked then 
		amount = 1 
		agressive = false
		tries = 0 
	end
	local movements = 0
	for i = 1, amount do
		local moved = false
		for i = 1, tries do
			if i > 1 then
				print ('useing a try')
			end
			if detectFull() then handle.full() end
			if turtle.getFuelLevel() <= baseFuelLevel then handle.fuel() end
			if detectTurtle('front') then handle.turtle('front', agressive) end
			if detectAnimal('front') then handle.animal('front') end
			if detectBlock('front') then handle.block('front', agressive) end

			moved = move('forward')
			if not moved and agressive then 
				handle.gravel('front')  
				moved = move('forward')
			end
			if not moved then
				print('failed to move')
			else
				movements = movements +1 
				break
			end
		end
	end
	if not hijacked then
		return amount == movements, movements
	else
		return amount == movements
	end
end
function up(amount, agressive, tries, hijacked)
	if amount == nil then amount = 1 end
	if agressive == nil then agressive = false end
	if tries == nil then tries = triesDefault end
	if hijacked == nil then hijacked = false end

	if hijacked then 
		amount = 1 
		agressive = false
		tries = 0 
	end
	local movements = 0
	for i = 1, amount do
		local moved = false
		for i = 1, tries do
			if detectFull() then handle.full() end
			if turtle.getFuelLevel() <= baseFuelLevel then handle.fuel() end
			if detectTurtle('top') then handle.turtle('top', agressive) end
			if detectAnimal('top') then handle.animal('top') end
			if detectBlock('top') then handle.block('top', agressive) end
			moved = move('up')
			if not moved and agressive then 
				handle.gravel('top')  
				moved = move('up')
			end
			if not moved then
				print('failed to move')
			else
				movements = movements +1 
				break
			end
		end
	end
	if not hijacked then
		return amount == movements, movements
	else
		return amount == movements
	end
end
function down(amount, agressive, tries, hijacked)
	if amount == nil then amount = 1 end
	if agressive == nil then agressive = false end
	if tries == nil then tries = triesDefault end
	if hijacked == nil then hijacked = false end

	if hijacked then 
		amount = 1 
		agressive = false
		tries = 0 
	end
	local movements = 0
	for i = 1, amount do
		local moved = false
		for i = 1, tries do
			if detectFull() then handle.full() end
			if turtle.getFuelLevel() <= baseFuelLevel then handle.fuel() end
			if detectTurtle('bottom') then handle.turtle('bottom', agressive) end
			if detectAnimal('bottom') then handle.animal('bottom') end
			if detectBlock('bottom') then handle.block('bottom', agressive) end
			moved = move('down')
			if not moved and agressive then 
				handle.gravel('bottom')  
				moved = move('down')
			end
			if not moved then
				print('failed to move')
			else
				movements = movements +1 
				break
			end
		end
	end
	if not hijacked then
		return amount == movements, movements
	else
		return amount == movements
	end
end

function back(amount, agressive, tries, hijacked)
	if amount == nil then amount = 1 end
	if agressive == nil then agressive = false end
	if tries == nil then tries = triesDefault end
	if hijacked == nil then hijacked = false end

	if hijacked then 
		amount = 1 
		agressive = false 
		tries = 0 
	end
	local movements = 0
	turned = false
	for i = 1, amount do
		local moved = false
		for i = 1, tries do
			if detectFull() then handle.full() end
			if turtle.getFuelLevel() <= baseFuelLevel then handle.fuel() end
			
			if turned then
				moved = forward(1,agressive,1,hijacked)
			else
				moved = move('back')
				if not moved then 
					turnRight(2)
					turned = true
					moved = forward(1,agressive,1,hijacked)
				end
			end
			if not moved then
				print('failed to move')
			else
				movements = movements +1 
				break
			end
		end
	end
	if turned then turnRight(2) end
	if not hijacked then
		return amount == movements, movements
	else
		return amount == movements
	end
end

function hijackTurtleAPI(restore)
    -- Wrap methods to avoid accidentally passing parameters along. This is
    -- done to make sure behavior is the same even if the functions are
    -- called with (unused/invalid) parameters.
    if restore then
        if not turtle._pos then return end
        turtle.forward   = turtle._pos.forward
        turtle.back      = turtle._pos.back
        turtle.up        = turtle._pos.up
        turtle.down      = turtle._pos.down
        turtle.turnRight = turtle._pos.turnRight
        turtle.turnLeft  = turtle._pos.turnLeft
        turtle._pos = nil
    else
        if turtle._pos then return end
        turtle._pos = {
            forward   = turtle.forward,
            back      = turtle.back,
            up        = turtle.up,
            down      = turtle.down,
            turnRight = turtle.turnRight,
            turnLeft  = turtle.turnLeft,
            refuel    = turtle.refuel
        }
        turtle.forward   = function() return move('forward') ~= false end
        turtle.back      = function() return move('back') ~= false end
        turtle.up        = function() return move('up') ~= false end
        turtle.down      = function() return move('down') ~= false end
        turtle.turnRight = function() return turnRight() ~= false end
        turtle.turnLeft  = function() return turnLeft() ~= false end
    end
end

